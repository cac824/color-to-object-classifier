import cv2
from face_detection import load_face_cascade, detect_faces
from object_detection import detect_objects
from functions import draw_bounding_boxes, blue_lower, blue_upper, green_lower, green_upper, darkred_lower, \
    darkred_upper, lightred_lower, lightred_upper

cap = cv2.VideoCapture(0)

if not cap.isOpened():
    print("Error: Could not open camera.")
    exit()

face_cascade = load_face_cascade('haarcascade_frontalface_default.xml')

while True:
    ret, frame = cap.read()

    if not ret:
        print("Error: Can't receive frame.")
        break

    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    blue_mask = cv2.inRange(hsv, blue_lower, blue_upper)
    green_mask = cv2.inRange(hsv, green_lower, green_upper)
    darkred_mask = cv2.inRange(hsv, darkred_lower, darkred_upper)
    lightred_mask = cv2.inRange(hsv, lightred_lower, lightred_upper)

    blue_contours, _ = cv2.findContours(blue_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    green_contours, _ = cv2.findContours(green_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    darkred_contours, _ = cv2.findContours(darkred_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    lightred_contours, _ = cv2.findContours(lightred_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    for blue_contour in blue_contours:
        x, y, w, h = cv2.boundingRect(blue_contour)
        cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
    for green_contour in green_contours:
        x, y, w, h = cv2.boundingRect(green_contour)
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
    for darkred_contour in darkred_contours:
        x, y, w, h = cv2.boundingRect(darkred_contour)
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 139), 2)
    for lightred_contour in lightred_contours:
        x, y, w, h = cv2.boundingRect(lightred_contour)
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)

    blue_result = cv2.bitwise_and(frame, frame, mask=blue_mask)
    green_result = cv2.bitwise_and(frame, frame, mask=green_mask)
    darkred_result = cv2.bitwise_and(frame, frame, mask=darkred_mask)
    lightred_result = cv2.bitwise_and(frame, frame, mask=lightred_mask)

    blue_count = cv2.countNonZero(blue_mask)
    green_count = cv2.countNonZero(green_mask)
    darkred_count = cv2.countNonZero(darkred_mask)
    lightred_count = cv2.countNonZero(lightred_mask)

    faces = detect_faces(frame, face_cascade)
    draw_bounding_boxes(frame, faces, "Face", color=(255, 255, 255))

    cv2.imshow('Frame', frame)

    if cv2.waitKey(1) == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
